// Generated by @wagmi/cli@1.1.0 on 10/30/2023 at 12:17:38 PM
import {
  useContractEvent,
  UseContractEventConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
} from "wagmi"
import {
  PrepareWriteContractResult,
  ReadContractResult,
  WriteContractMode,
} from "wagmi/actions"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// polygonZkEVMBridge
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const polygonZkEvmBridgeABI = [
  { type: "error", inputs: [], name: "AlreadyClaimed" },
  { type: "error", inputs: [], name: "AmountDoesNotMatchMsgValue" },
  { type: "error", inputs: [], name: "DestinationNetworkInvalid" },
  { type: "error", inputs: [], name: "EtherTransferFailed" },
  { type: "error", inputs: [], name: "GlobalExitRootInvalid" },
  { type: "error", inputs: [], name: "InvalidSmtProof" },
  { type: "error", inputs: [], name: "MerkleTreeFull" },
  { type: "error", inputs: [], name: "MessageFailed" },
  { type: "error", inputs: [], name: "MsgValueNotZero" },
  { type: "error", inputs: [], name: "NotValidAmount" },
  { type: "error", inputs: [], name: "NotValidOwner" },
  { type: "error", inputs: [], name: "NotValidSignature" },
  { type: "error", inputs: [], name: "NotValidSpender" },
  { type: "error", inputs: [], name: "OnlyEmergencyState" },
  { type: "error", inputs: [], name: "OnlyNotEmergencyState" },
  { type: "error", inputs: [], name: "OnlyPolygonZkEVM" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "leafType",
        internalType: "uint8",
        type: "uint8",
        indexed: false,
      },
      {
        name: "originNetwork",
        internalType: "uint32",
        type: "uint32",
        indexed: false,
      },
      {
        name: "originAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "destinationNetwork",
        internalType: "uint32",
        type: "uint32",
        indexed: false,
      },
      {
        name: "destinationAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "metadata",
        internalType: "bytes",
        type: "bytes",
        indexed: false,
      },
      {
        name: "depositCount",
        internalType: "uint32",
        type: "uint32",
        indexed: false,
      },
    ],
    name: "BridgeEvent",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint32", type: "uint32", indexed: false },
      {
        name: "originNetwork",
        internalType: "uint32",
        type: "uint32",
        indexed: false,
      },
      {
        name: "originAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "destinationAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ClaimEvent",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [],
    name: "EmergencyStateActivated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [],
    name: "EmergencyStateDeactivated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "originNetwork",
        internalType: "uint32",
        type: "uint32",
        indexed: false,
      },
      {
        name: "originTokenAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "wrappedTokenAddress",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "metadata",
        internalType: "bytes",
        type: "bytes",
        indexed: false,
      },
    ],
    name: "NewWrappedToken",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "activateEmergencyState",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "destinationNetwork", internalType: "uint32", type: "uint32" },
      { name: "destinationAddress", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "token", internalType: "address", type: "address" },
      { name: "forceUpdateGlobalExitRoot", internalType: "bool", type: "bool" },
      { name: "permitData", internalType: "bytes", type: "bytes" },
    ],
    name: "bridgeAsset",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "destinationNetwork", internalType: "uint32", type: "uint32" },
      { name: "destinationAddress", internalType: "address", type: "address" },
      { name: "forceUpdateGlobalExitRoot", internalType: "bool", type: "bool" },
      { name: "metadata", internalType: "bytes", type: "bytes" },
    ],
    name: "bridgeMessage",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "smtProof", internalType: "bytes32[32]", type: "bytes32[32]" },
      { name: "index", internalType: "uint32", type: "uint32" },
      { name: "mainnetExitRoot", internalType: "bytes32", type: "bytes32" },
      { name: "rollupExitRoot", internalType: "bytes32", type: "bytes32" },
      { name: "originNetwork", internalType: "uint32", type: "uint32" },
      { name: "originTokenAddress", internalType: "address", type: "address" },
      { name: "destinationNetwork", internalType: "uint32", type: "uint32" },
      { name: "destinationAddress", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "metadata", internalType: "bytes", type: "bytes" },
    ],
    name: "claimAsset",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "smtProof", internalType: "bytes32[32]", type: "bytes32[32]" },
      { name: "index", internalType: "uint32", type: "uint32" },
      { name: "mainnetExitRoot", internalType: "bytes32", type: "bytes32" },
      { name: "rollupExitRoot", internalType: "bytes32", type: "bytes32" },
      { name: "originNetwork", internalType: "uint32", type: "uint32" },
      { name: "originAddress", internalType: "address", type: "address" },
      { name: "destinationNetwork", internalType: "uint32", type: "uint32" },
      { name: "destinationAddress", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "metadata", internalType: "bytes", type: "bytes" },
    ],
    name: "claimMessage",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "claimedBitMap",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "deactivateEmergencyState",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "depositCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getDepositRoot",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "leafType", internalType: "uint8", type: "uint8" },
      { name: "originNetwork", internalType: "uint32", type: "uint32" },
      { name: "originAddress", internalType: "address", type: "address" },
      { name: "destinationNetwork", internalType: "uint32", type: "uint32" },
      { name: "destinationAddress", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "getLeafValue",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "originNetwork", internalType: "uint32", type: "uint32" },
      { name: "originTokenAddress", internalType: "address", type: "address" },
    ],
    name: "getTokenWrappedAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalExitRootManager",
    outputs: [
      {
        name: "",
        internalType: "contract IBasePolygonZkEVMGlobalExitRoot",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_networkID", internalType: "uint32", type: "uint32" },
      {
        name: "_globalExitRootManager",
        internalType: "contract IBasePolygonZkEVMGlobalExitRoot",
        type: "address",
      },
      {
        name: "_polygonZkEVMaddress",
        internalType: "address",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "index", internalType: "uint256", type: "uint256" }],
    name: "isClaimed",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isEmergencyState",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "lastUpdatedDepositCount",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "networkID",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "polygonZkEVMaddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "originNetwork", internalType: "uint32", type: "uint32" },
      { name: "originTokenAddress", internalType: "address", type: "address" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "decimals", internalType: "uint8", type: "uint8" },
    ],
    name: "precalculatedWrapperAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "tokenInfoToWrappedToken",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "updateGlobalExitRoot",
    outputs: [],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "leafHash", internalType: "bytes32", type: "bytes32" },
      { name: "smtProof", internalType: "bytes32[32]", type: "bytes32[32]" },
      { name: "index", internalType: "uint32", type: "uint32" },
      { name: "root", internalType: "bytes32", type: "bytes32" },
    ],
    name: "verifyMerkleProof",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "wrappedTokenToTokenInfo",
    outputs: [
      { name: "originNetwork", internalType: "uint32", type: "uint32" },
      { name: "originTokenAddress", internalType: "address", type: "address" },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__.
 */
export function usePolygonZkEvmBridgeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"claimedBitMap"`.
 */
export function usePolygonZkEvmBridgeClaimedBitMap<
  TFunctionName extends "claimedBitMap",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "claimedBitMap",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"depositCount"`.
 */
export function usePolygonZkEvmBridgeDepositCount<
  TFunctionName extends "depositCount",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "depositCount",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"getDepositRoot"`.
 */
export function usePolygonZkEvmBridgeGetDepositRoot<
  TFunctionName extends "getDepositRoot",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "getDepositRoot",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"getLeafValue"`.
 */
export function usePolygonZkEvmBridgeGetLeafValue<
  TFunctionName extends "getLeafValue",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "getLeafValue",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"getTokenWrappedAddress"`.
 */
export function usePolygonZkEvmBridgeGetTokenWrappedAddress<
  TFunctionName extends "getTokenWrappedAddress",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "getTokenWrappedAddress",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"globalExitRootManager"`.
 */
export function usePolygonZkEvmBridgeGlobalExitRootManager<
  TFunctionName extends "globalExitRootManager",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "globalExitRootManager",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"isClaimed"`.
 */
export function usePolygonZkEvmBridgeIsClaimed<
  TFunctionName extends "isClaimed",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "isClaimed",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"isEmergencyState"`.
 */
export function usePolygonZkEvmBridgeIsEmergencyState<
  TFunctionName extends "isEmergencyState",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "isEmergencyState",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"lastUpdatedDepositCount"`.
 */
export function usePolygonZkEvmBridgeLastUpdatedDepositCount<
  TFunctionName extends "lastUpdatedDepositCount",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "lastUpdatedDepositCount",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"networkID"`.
 */
export function usePolygonZkEvmBridgeNetworkId<
  TFunctionName extends "networkID",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "networkID",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"polygonZkEVMaddress"`.
 */
export function usePolygonZkEvmBridgePolygonZkEvMaddress<
  TFunctionName extends "polygonZkEVMaddress",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "polygonZkEVMaddress",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"precalculatedWrapperAddress"`.
 */
export function usePolygonZkEvmBridgePrecalculatedWrapperAddress<
  TFunctionName extends "precalculatedWrapperAddress",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "precalculatedWrapperAddress",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"tokenInfoToWrappedToken"`.
 */
export function usePolygonZkEvmBridgeTokenInfoToWrappedToken<
  TFunctionName extends "tokenInfoToWrappedToken",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "tokenInfoToWrappedToken",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"verifyMerkleProof"`.
 */
export function usePolygonZkEvmBridgeVerifyMerkleProof<
  TFunctionName extends "verifyMerkleProof",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "verifyMerkleProof",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"wrappedTokenToTokenInfo"`.
 */
export function usePolygonZkEvmBridgeWrappedTokenToTokenInfo<
  TFunctionName extends "wrappedTokenToTokenInfo",
  TSelectData = ReadContractResult<typeof polygonZkEvmBridgeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof polygonZkEvmBridgeABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: polygonZkEvmBridgeABI,
    functionName: "wrappedTokenToTokenInfo",
    ...config,
  } as UseContractReadConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__.
 */
export function usePolygonZkEvmBridgeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof polygonZkEvmBridgeABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof polygonZkEvmBridgeABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof polygonZkEvmBridgeABI, TFunctionName, TMode>({
    abi: polygonZkEvmBridgeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"activateEmergencyState"`.
 */
export function usePolygonZkEvmBridgeActivateEmergencyState<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof polygonZkEvmBridgeABI,
          "activateEmergencyState"
        >["request"]["abi"],
        "activateEmergencyState",
        TMode
      > & { functionName?: "activateEmergencyState" }
    : UseContractWriteConfig<
        typeof polygonZkEvmBridgeABI,
        "activateEmergencyState",
        TMode
      > & {
        abi?: never
        functionName?: "activateEmergencyState"
      } = {} as any
) {
  return useContractWrite<
    typeof polygonZkEvmBridgeABI,
    "activateEmergencyState",
    TMode
  >({
    abi: polygonZkEvmBridgeABI,
    functionName: "activateEmergencyState",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"bridgeAsset"`.
 */
export function usePolygonZkEvmBridgeBridgeAsset<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof polygonZkEvmBridgeABI,
          "bridgeAsset"
        >["request"]["abi"],
        "bridgeAsset",
        TMode
      > & { functionName?: "bridgeAsset" }
    : UseContractWriteConfig<
        typeof polygonZkEvmBridgeABI,
        "bridgeAsset",
        TMode
      > & {
        abi?: never
        functionName?: "bridgeAsset"
      } = {} as any
) {
  return useContractWrite<typeof polygonZkEvmBridgeABI, "bridgeAsset", TMode>({
    abi: polygonZkEvmBridgeABI,
    functionName: "bridgeAsset",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"bridgeMessage"`.
 */
export function usePolygonZkEvmBridgeBridgeMessage<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof polygonZkEvmBridgeABI,
          "bridgeMessage"
        >["request"]["abi"],
        "bridgeMessage",
        TMode
      > & { functionName?: "bridgeMessage" }
    : UseContractWriteConfig<
        typeof polygonZkEvmBridgeABI,
        "bridgeMessage",
        TMode
      > & {
        abi?: never
        functionName?: "bridgeMessage"
      } = {} as any
) {
  return useContractWrite<typeof polygonZkEvmBridgeABI, "bridgeMessage", TMode>(
    {
      abi: polygonZkEvmBridgeABI,
      functionName: "bridgeMessage",
      ...config,
    } as any
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"claimAsset"`.
 */
export function usePolygonZkEvmBridgeClaimAsset<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof polygonZkEvmBridgeABI,
          "claimAsset"
        >["request"]["abi"],
        "claimAsset",
        TMode
      > & { functionName?: "claimAsset" }
    : UseContractWriteConfig<
        typeof polygonZkEvmBridgeABI,
        "claimAsset",
        TMode
      > & {
        abi?: never
        functionName?: "claimAsset"
      } = {} as any
) {
  return useContractWrite<typeof polygonZkEvmBridgeABI, "claimAsset", TMode>({
    abi: polygonZkEvmBridgeABI,
    functionName: "claimAsset",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"claimMessage"`.
 */
export function usePolygonZkEvmBridgeClaimMessage<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof polygonZkEvmBridgeABI,
          "claimMessage"
        >["request"]["abi"],
        "claimMessage",
        TMode
      > & { functionName?: "claimMessage" }
    : UseContractWriteConfig<
        typeof polygonZkEvmBridgeABI,
        "claimMessage",
        TMode
      > & {
        abi?: never
        functionName?: "claimMessage"
      } = {} as any
) {
  return useContractWrite<typeof polygonZkEvmBridgeABI, "claimMessage", TMode>({
    abi: polygonZkEvmBridgeABI,
    functionName: "claimMessage",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"deactivateEmergencyState"`.
 */
export function usePolygonZkEvmBridgeDeactivateEmergencyState<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof polygonZkEvmBridgeABI,
          "deactivateEmergencyState"
        >["request"]["abi"],
        "deactivateEmergencyState",
        TMode
      > & { functionName?: "deactivateEmergencyState" }
    : UseContractWriteConfig<
        typeof polygonZkEvmBridgeABI,
        "deactivateEmergencyState",
        TMode
      > & {
        abi?: never
        functionName?: "deactivateEmergencyState"
      } = {} as any
) {
  return useContractWrite<
    typeof polygonZkEvmBridgeABI,
    "deactivateEmergencyState",
    TMode
  >({
    abi: polygonZkEvmBridgeABI,
    functionName: "deactivateEmergencyState",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"initialize"`.
 */
export function usePolygonZkEvmBridgeInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof polygonZkEvmBridgeABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof polygonZkEvmBridgeABI,
        "initialize",
        TMode
      > & {
        abi?: never
        functionName?: "initialize"
      } = {} as any
) {
  return useContractWrite<typeof polygonZkEvmBridgeABI, "initialize", TMode>({
    abi: polygonZkEvmBridgeABI,
    functionName: "initialize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"updateGlobalExitRoot"`.
 */
export function usePolygonZkEvmBridgeUpdateGlobalExitRoot<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof polygonZkEvmBridgeABI,
          "updateGlobalExitRoot"
        >["request"]["abi"],
        "updateGlobalExitRoot",
        TMode
      > & { functionName?: "updateGlobalExitRoot" }
    : UseContractWriteConfig<
        typeof polygonZkEvmBridgeABI,
        "updateGlobalExitRoot",
        TMode
      > & {
        abi?: never
        functionName?: "updateGlobalExitRoot"
      } = {} as any
) {
  return useContractWrite<
    typeof polygonZkEvmBridgeABI,
    "updateGlobalExitRoot",
    TMode
  >({
    abi: polygonZkEvmBridgeABI,
    functionName: "updateGlobalExitRoot",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__.
 */
export function usePreparePolygonZkEvmBridgeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof polygonZkEvmBridgeABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: polygonZkEvmBridgeABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof polygonZkEvmBridgeABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"activateEmergencyState"`.
 */
export function usePreparePolygonZkEvmBridgeActivateEmergencyState(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof polygonZkEvmBridgeABI,
      "activateEmergencyState"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: polygonZkEvmBridgeABI,
    functionName: "activateEmergencyState",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof polygonZkEvmBridgeABI,
    "activateEmergencyState"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"bridgeAsset"`.
 */
export function usePreparePolygonZkEvmBridgeBridgeAsset(
  config: Omit<
    UsePrepareContractWriteConfig<typeof polygonZkEvmBridgeABI, "bridgeAsset">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: polygonZkEvmBridgeABI,
    functionName: "bridgeAsset",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof polygonZkEvmBridgeABI,
    "bridgeAsset"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"bridgeMessage"`.
 */
export function usePreparePolygonZkEvmBridgeBridgeMessage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof polygonZkEvmBridgeABI,
      "bridgeMessage"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: polygonZkEvmBridgeABI,
    functionName: "bridgeMessage",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof polygonZkEvmBridgeABI,
    "bridgeMessage"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"claimAsset"`.
 */
export function usePreparePolygonZkEvmBridgeClaimAsset(
  config: Omit<
    UsePrepareContractWriteConfig<typeof polygonZkEvmBridgeABI, "claimAsset">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: polygonZkEvmBridgeABI,
    functionName: "claimAsset",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof polygonZkEvmBridgeABI,
    "claimAsset"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"claimMessage"`.
 */
export function usePreparePolygonZkEvmBridgeClaimMessage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof polygonZkEvmBridgeABI, "claimMessage">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: polygonZkEvmBridgeABI,
    functionName: "claimMessage",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof polygonZkEvmBridgeABI,
    "claimMessage"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"deactivateEmergencyState"`.
 */
export function usePreparePolygonZkEvmBridgeDeactivateEmergencyState(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof polygonZkEvmBridgeABI,
      "deactivateEmergencyState"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: polygonZkEvmBridgeABI,
    functionName: "deactivateEmergencyState",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof polygonZkEvmBridgeABI,
    "deactivateEmergencyState"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"initialize"`.
 */
export function usePreparePolygonZkEvmBridgeInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof polygonZkEvmBridgeABI, "initialize">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: polygonZkEvmBridgeABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof polygonZkEvmBridgeABI,
    "initialize"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `functionName` set to `"updateGlobalExitRoot"`.
 */
export function usePreparePolygonZkEvmBridgeUpdateGlobalExitRoot(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof polygonZkEvmBridgeABI,
      "updateGlobalExitRoot"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: polygonZkEvmBridgeABI,
    functionName: "updateGlobalExitRoot",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof polygonZkEvmBridgeABI,
    "updateGlobalExitRoot"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__.
 */
export function usePolygonZkEvmBridgeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof polygonZkEvmBridgeABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: polygonZkEvmBridgeABI,
    ...config,
  } as UseContractEventConfig<typeof polygonZkEvmBridgeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `eventName` set to `"BridgeEvent"`.
 */
export function usePolygonZkEvmBridgeBridgeEventEvent(
  config: Omit<
    UseContractEventConfig<typeof polygonZkEvmBridgeABI, "BridgeEvent">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: polygonZkEvmBridgeABI,
    eventName: "BridgeEvent",
    ...config,
  } as UseContractEventConfig<typeof polygonZkEvmBridgeABI, "BridgeEvent">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `eventName` set to `"ClaimEvent"`.
 */
export function usePolygonZkEvmBridgeClaimEventEvent(
  config: Omit<
    UseContractEventConfig<typeof polygonZkEvmBridgeABI, "ClaimEvent">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: polygonZkEvmBridgeABI,
    eventName: "ClaimEvent",
    ...config,
  } as UseContractEventConfig<typeof polygonZkEvmBridgeABI, "ClaimEvent">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `eventName` set to `"EmergencyStateActivated"`.
 */
export function usePolygonZkEvmBridgeEmergencyStateActivatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof polygonZkEvmBridgeABI,
      "EmergencyStateActivated"
    >,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: polygonZkEvmBridgeABI,
    eventName: "EmergencyStateActivated",
    ...config,
  } as UseContractEventConfig<
    typeof polygonZkEvmBridgeABI,
    "EmergencyStateActivated"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `eventName` set to `"EmergencyStateDeactivated"`.
 */
export function usePolygonZkEvmBridgeEmergencyStateDeactivatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof polygonZkEvmBridgeABI,
      "EmergencyStateDeactivated"
    >,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: polygonZkEvmBridgeABI,
    eventName: "EmergencyStateDeactivated",
    ...config,
  } as UseContractEventConfig<
    typeof polygonZkEvmBridgeABI,
    "EmergencyStateDeactivated"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePolygonZkEvmBridgeInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof polygonZkEvmBridgeABI, "Initialized">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: polygonZkEvmBridgeABI,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof polygonZkEvmBridgeABI, "Initialized">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link polygonZkEvmBridgeABI}__ and `eventName` set to `"NewWrappedToken"`.
 */
export function usePolygonZkEvmBridgeNewWrappedTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof polygonZkEvmBridgeABI, "NewWrappedToken">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: polygonZkEvmBridgeABI,
    eventName: "NewWrappedToken",
    ...config,
  } as UseContractEventConfig<typeof polygonZkEvmBridgeABI, "NewWrappedToken">)
}
